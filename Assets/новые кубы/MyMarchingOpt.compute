// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel March
#include "/MarchTables.compute"

static const int numThreads = 8;

struct Triangle {
    float3 vertexC;
    float3 vertexB;
    float3 vertexA;
};

AppendStructuredBuffer<Triangle> triangles;
RWStructuredBuffer<float> points;
RWStructuredBuffer<float4> destroyers;
RWStructuredBuffer<int> connectors;

float3 chunkpos;
int numPointsPerAxis;
float isoLevel;
float scale;

float3 interpolateVerts(float4 v1, float4 v2) {
    float t = (isoLevel - v1.w) / (v2.w - v1.w);
    return v1.xyz + t * (v2.xyz - v1.xyz);
}

int indexFromCoord(int x, int y, int z) {
    return z * numPointsPerAxis * numPointsPerAxis + y * numPointsPerAxis + x;
}

float dist(float3 a, float3 b) {
    float dis;
    float rsx = (a.x - b.x) * (a.x - b.x);
    float rsy = (a.y - b.y) * (a.y - b.y);
    float rsz = (a.z - b.z) * (a.z - b.z);
    dis = sqrt(rsx + rsy + rsz);
    return dis;
}
[numthreads(numThreads, numThreads, numThreads)]
void March(int3 id : SV_DispatchThreadID)
{
    // Stop one point before the end because voxel includes neighbouring points

    if (id.x >= numPointsPerAxis - 1 || id.y >= numPointsPerAxis - 1 || id.z >= numPointsPerAxis - 1) {
        return;
    }
    
    

    // 8 corners of the current cube
    float4 cubeCorners[8] = {
        float4((id.x) * scale, (id.y) * scale, (id.z) * scale, points[indexFromCoord(id.x, id.y, id.z)]),
        float4((id.x + 1) * scale, (id.y) * scale, (id.z) * scale,points[indexFromCoord(id.x + 1, id.y, id.z)]),
        float4((id.x + 1) * scale, (id.y) * scale, (id.z + 1) * scale,points[indexFromCoord(id.x + 1, id.y, id.z + 1)]),
        float4((id.x) * scale, (id.y) * scale, (id.z + 1) * scale,points[indexFromCoord(id.x, id.y, id.z + 1)]),
        float4((id.x) * scale, (id.y + 1) * scale, (id.z) * scale,points[indexFromCoord(id.x, id.y + 1, id.z)]),
        float4((id.x + 1) * scale, (id.y + 1) * scale, (id.z) * scale,points[indexFromCoord(id.x + 1, id.y + 1, id.z)]),
        float4((id.x + 1) * scale, (id.y + 1) * scale, (id.z + 1) * scale,points[indexFromCoord(id.x + 1, id.y + 1, id.z + 1)]),
        float4((id.x) * scale, (id.y + 1) * scale, (id.z + 1) * scale,points[indexFromCoord(id.x, id.y + 1, id.z + 1)]),
    };
    
    int cubeIndex = 0;
    if (cubeCorners[0].w < isoLevel) cubeIndex |= 1;
    if (cubeCorners[1].w < isoLevel) cubeIndex |= 2;
    if (cubeCorners[2].w < isoLevel) cubeIndex |= 4;
    if (cubeCorners[3].w < isoLevel) cubeIndex |= 8;
    if (cubeCorners[4].w < isoLevel) cubeIndex |= 16;
    if (cubeCorners[5].w < isoLevel) cubeIndex |= 32;
    if (cubeCorners[6].w < isoLevel) cubeIndex |= 64;
    if (cubeCorners[7].w < isoLevel) cubeIndex |= 128;

    if (cubeIndex>0&&cubeIndex < 255&& cubeCorners[0].x%0.25==0&& cubeCorners[0].y%0.25==0&& cubeCorners[0].z%0.25==0) {
        if (cubeCorners[0].x == 0) {
            connectors[0] = 1;
        }
        if (cubeCorners[0].y == 0) {
            connectors[1] = 1;
        }
        if (cubeCorners[0].z == 0) {
            connectors[2] = 1;
        }
    }



    for (int i = 0; triangulation[cubeIndex][i] != -1; i += 3) {
        int a0 = cornerIndexAFromEdge[triangulation[cubeIndex][i]];
        int b0 = cornerIndexBFromEdge[triangulation[cubeIndex][i]];

        int a1 = cornerIndexAFromEdge[triangulation[cubeIndex][i + 1]];
        int b1 = cornerIndexBFromEdge[triangulation[cubeIndex][i + 1]];

        int a2 = cornerIndexAFromEdge[triangulation[cubeIndex][i + 2]];
        int b2 = cornerIndexBFromEdge[triangulation[cubeIndex][i + 2]];

        Triangle tri;
        tri.vertexA = interpolateVerts(cubeCorners[a0], cubeCorners[b0]);
        tri.vertexB = interpolateVerts(cubeCorners[a1], cubeCorners[b1]);
        tri.vertexC = interpolateVerts(cubeCorners[a2], cubeCorners[b2]);
        triangles.Append(tri);
    }


}
